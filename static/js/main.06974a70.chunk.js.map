{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","firebaseInstance","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","changeInputValue","e","target","name","value","submitUserInfo","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","onSubmit","type","placeholder","onChange","required","onClick","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","editBtnClick","NweetEdit","id","doc","update","deleteNweet","window","confirm","delete","previewUrl","refFromURL","src","width","height","alt","NweetFactory","userInfo","nweet","setNweet","preview","setPreview","submitNweet","previewRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","Boolean","readAsDataURL","onloadend","result","currentTarget","Home","nweets","setNweets","useEffect","onSnapshot","orderBy","snap","newArray","docs","map","el","Profile","refreshUser","myNweets","setMyNweets","displayName","newDisplayName","setNewDisplayName","history","useHistory","getMyNweets","changeDisplayNameSubmit","updateProfile","where","get","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUerInfo","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06974a70.chunk.js","sourcesContent":["import firebase from 'firebase/compat/app'\nimport \"firebase/compat/auth\"; // <- 인증 모듈 import \nimport \"firebase/compat/firestore\"; // <- 파이어베이스 데이터베이스(파이어스토어)를 사용하기 위한 모듈 \nimport \"firebase/compat/storage\"; // <- 사진, 동영상 같이 덩치가 큰 파일을 저장했다가 필요할때 꺼내서 사용할수 있게 해주는 공간\n\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\n\n// 파이어베이스를 초기화해서 모듈로 내보낼 수 있게 된다.\n// export default firebase.initializeApp(firebaseConfig)\n\nfirebase.initializeApp(firebaseConfig) // <- 파이어베이스를 초기화 하는 방법\n\n// 1번째 줄에서 사용한 변수 firebase 에, 2번째 줄에 import 한 인증 모듈 안에 있는 auth 메서드를 사용\nexport const authService =  firebase.auth() // <- 로그인할때 사용하는 auth() 메서드\n\nexport const firebaseInstance = firebase; \n\n// 파이어베이스 데이터베이스를 사용하려면 firestore 메서드를 써야 한다.\n// firestore 메서드를 쓸때는 async await 를 써야 한다.\nexport const dbService = firebase.firestore();\n\nexport const storageService = firebase.storage() // <- 사진, 동영상 같이 덩치가 큰 파일을 저장했다가 필요할때 꺼내서 사용할수 있게 해주는 공간\n","import { useState } from \"react\"\nimport { authService } from \"fbase\";\n\n\nconst AuthForm = () => {\n\n\n  const [email, setEmail] = useState('')\n  const [ password, setPassword] = useState('')\n  const [newAccount, setNewAccount] = useState(true)\n  const [error, setError] = useState('')\n\n\n  const changeInputValue = (e) => {\n    const { target : {name, value}, } = e;\n    if(name === 'email') {\n      // setEmail(prev => prev += value) \n      setEmail(value)       \n    }else if(name === 'password') {\n      setPassword(value)\n    }\n  }\n\n\n  const toggleAccount = () => setNewAccount(!newAccount)\n\n\n  const submitUserInfo = async (e) => {\n    e.preventDefault()\n    try{\n      let data;\n      if(newAccount){\n        // create newAccount\n        data = await authService.createUserWithEmailAndPassword(email, password)\n      }else{\n        // Log In\n        data = await authService.signInWithEmailAndPassword(email, password)\n      }\n      console.log(data);\n    }catch(error){\n      // console.log(error);\n      // console.log(error.message); // Firebase: The email address is already in use by another account. (auth/email-already-in-use).\n      setError(error.message)\n    }\n  }\n\n\n  return (\n    <>\n      <form onSubmit={submitUserInfo}>\n          <input name=\"email\" type=\"email\" placeholder=\"Email\" value={email} onChange={changeInputValue} required/>\n          <input name=\"password\" type=\"password\" placeholder=\"Password\" value={password} onChange={changeInputValue} required />\n          {/* <input type=\"submit\" value=\"Log in\" /> */}\n          <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log in\"} />\n          {error}\n      </form>\n      <span onClick={toggleAccount}>\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  )\n}\n\nexport default AuthForm; \n","import { useState } from \"react\"\nimport { authService, firebaseInstance } from \"fbase\";\n\nimport AuthForm from \"components/AuthForm\";\n\nconst Auth = () =>{\n\n  // <span>Auth</span>\n\n  // const [email, setEmail] = useState('')\n  // const [ password, setPassword] = useState('')\n  // const [newAccount, setNewAccount] = useState(true)\n  // const [error, setError] = useState('')\n\n  // const changeInputValue = (e) => {\n  //   const { target : {name, value}, } = e;\n  //   if(name === 'email') {\n  //     // setEmail(prev => prev += value) \n  //     setEmail(value)       \n  //   }else if(name === 'password') {\n  //     setPassword(value)\n  //   }\n  // }\n\n\n  // const toggleAccount = () => setNewAccount((prev) => !prev)\n  // const toggleAccount = () => setNewAccount(!newAccount)\n\n\n  const onSocialClick = async (e) => {\n    // console.log(e.target.name);\n    const { target : {name}, } = e;\n    let provider; \n    if(name === 'google') {\n      provider = new firebaseInstance.auth.GoogleAuthProvider() \n    }else if(name === 'github') {\n      provider = new firebaseInstance.auth.GithubAuthProvider()\n    } // <- provider 에 할당한것들은 '소셜 로그인 서비스 제공 업체' 정도로 생각하면 된다. \n    const data = await authService.signInWithPopup(provider) // <- signWithPopup :  소셜 로그인을 처리하는 비동기 함수(소셜 로그인 서비스를 제공)\n    // ㄴ> 소셜 로그인 서비스 제공 업체들을 할당한 provider 라는 변수를, 소셜 로그인을 처리하는 비동기 함수인 signWithPopup 함수에 인수로 넘겨서 소셜 로그인을 시도했다.\n    \n    console.log(data); // {operationType: 'signIn', credential: OAuthCredential, additionalUserInfo: GoogleAdditionalUserInfo, user: User}\n    // data.additionalUserInfo.providerId : \"google.com\"\n  }\n\n\n  // const submitUserInfo = async (e) => {\n  //   e.preventDefault()\n  //   try{\n  //     let data;\n  //     if(newAccount){\n  //       // create newAccount\n  //       data = await authService.createUserWithEmailAndPassword(email, password)\n  //     }else{\n  //       // Log In\n  //       data = await authService.signInWithEmailAndPassword(email, password)\n  //     }\n  //     console.log(data);\n  //   }catch(error){\n  //     // console.log(error);\n  //     // console.log(error.message); // Firebase: The email address is already in use by another account. (auth/email-already-in-use).\n  //     setError(error.message)\n  //   }\n  // }\n\n  return(\n  // <div>\n    // <form onSubmit={submitUserInfo}>\n    //   <input name=\"email\" type=\"email\" placeholder=\"Email\" value={email} onChange={changeInputValue} required/>\n    //   <input name=\"password\" type=\"password\" placeholder=\"Password\" value={password} onChange={changeInputValue} required />\n    //   {/* <input type=\"submit\" value=\"Log in\" /> */}\n    //   <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log in\"} />\n    //   {error}\n    // </form>\n    // <span onClick={toggleAccount}>\n    //   {newAccount ? \"Sign In\" : \"Create Account\"}\n    // </span>\n    <>\n      <AuthForm/>\n\n      <div>\n        <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\n        <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\n      </div>\n      {/* </div>  */}\n    </>\n\n  )\n  \n  \n} \n\nexport default Auth","import { dbService, storageService } from \"fbase\";\nimport { useState } from \"react\";\n\nconst Nweet = ({nweetObj, isOwner}) => {\n\n  // console.log(nweetObj);\n   // ㄴ> {id: 'dGkhmV55Y9EEpqzmk6Wq', createdAt: 1635407312943, text: '나는 감자다!', creatorId: 'Ge42aWes3MUBYqB32TiPpSMFfST2'}\n\n\n   const [editing, setEditing] = useState(false) // <- 수정 버튼 눌렀을때 입력칸이랑 확인, 취소 버튼이 나타나는 State\n   const [ newNweet, setNewNweet] = useState(nweetObj.text) // <- 입력칸이랑 확인, 취소 버튼이 나타날떼 입력칸에 내가 작성해놨던 기존 트윗이 보이도록 하는 State\n\n\n   // 트윗 수정하기 ( CR'U'D )\n   // 수정버튼 누름 State\n    const editBtnClick = () => {\n      setEditing(!editing)\n    }\n   // 수정할 값 변화 이벤트\n    const changeInputValue = (e) => {\n      const {target : {value} } = e\n      setNewNweet(value)\n    }\n   // 수정할 값 파이어베이스에 업데이트 시키기(submit)\n    const NweetEdit = async (e) => {\n      e.preventDefault()\n      console.log(nweetObj.id, newNweet); // zIEV16599EvZZdp7HpOb 나는 감자다!!ㄹㄴㅇ러ㅣㅏ러니ㅏㅇㅓ이라\n      await dbService.doc(`nweets/${nweetObj.id}`).update({text: newNweet})\n      // ㄴ> .doc(~) : ~문서를 찾아서 / .update(~) : ~로 업데이트 요청\n      setEditing(false)\n    }\n\n\n\n\n   // 트윗 삭제하기 ( CRU'D' )\n    const deleteNweet = async (e) => {\n      e.preventDefault()\n      const alert = window.confirm('삭제하시겠습니까')\n      // console.log(alert); // 삭제 버튼 눌렀을 경우 : true , 취소 버튼 눌렀을 경우 : false\n      if(alert){ // <- alert 삭제 확인 버튼을 눌렀을 경우\n\n        // 파이어베이스 데이터베이스를 사용하려면 firestore 메서드를 써야 한다.\n        // firestore 메서드를 쓸때는 async await 를 써야 한다.\n        // fbase.js 에서 firestore 메서드를 할당시킨, dbService 변수를 쓰고 있으니, \n        // 이때도 async await 를 써야 한다.\n        // const data = await dbService.doc(`nweets/${nweetObj.id}`).delete()\n        // ㄴ> .doc() 메서드 - 문서의 정보들이 담겨있는 스냅샷(파이어스토어(파이어베이스의 데이터공간)의 원본을 사진 찍듯이 찍어줌)원본 얻을수 있는 메서드 \n        //                 - 문서 경로를 문자열로 입력 받아서, 문서를 리턴하는 메서드 \n        // console.log(data); // undefined\n\n        await dbService.doc(`nweets/${nweetObj.id}`).delete()\n        // ㄴ> .doc() 메서드 - 문서의 정보들이 담겨있는 스냅샷(파이어스토어(파이어베이스의 데이터공간)의 원본을 사진 찍듯이 찍어줌)원본 얻을수 있는 메서드 \n        //                 - 문서 경로를 문자열로 입력 받아서, 문서를 리턴하는 메서드 \n        \n        if(nweetObj.previewUrl !== '') { // <- // 미리보기 사진파일이 존재한다면(존재하지 않는게 아니라면)\n          await storageService.refFromURL(nweetObj.previewUrl).delete()\n        }\n\n\n      }\n    }\n  \n  \n    return (\n      <div>\n        {editing ? ( // <- 수정버튼 눌렀을 경우 \n        <>\n          <form onSubmit={NweetEdit}>\n            <input value={newNweet} onChange={changeInputValue} required />\n            <input type=\"submit\" value=\"Update Nweet\" />\n          </form>\n          <button onClick={editBtnClick}>Cancel</button>\n        </> \n      )\n        : \n      ( // <- 수정버튼 안눌렀을 경우 \n        <>\n          <h4>{nweetObj.text}</h4>\n          {nweetObj.previewUrl && ( <img src={nweetObj.previewUrl} width=\"50px\" height=\"50px\" alt=\"preview\" />)}\n          {isOwner && (\n            <> \n              <button onClick={deleteNweet}>Delete Nweet</button>\n              <button onClick={editBtnClick}>Edit Nweet</button>\n            </> )\n          }\n        </>\n        )}\n      </div>\n    )\n}\n\nexport default Nweet;","import { dbService, storageService } from \"fbase\"\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useState } from \"react\"\n\nconst NweetFactory = ({userInfo}) => {\n\n\n  const [ nweet, setNweet] = useState('')\n  const [ preview, setPreview] = useState('')\n\n\n  // 트윗 등록 ( 'C'RUD )\n  const submitNweet = async (e) => {\n    e.preventDefault()\n\n    // 파이어스토어 써서 트윗 등록하는 방법 --------------------\n    // await dbService.collection('nweets').add({\n    //   text: nweet,\n    //   createdAt: Date.now(),\n    //   creatorId: userInfo.uid\n    // })\n    // ㄴ> dbService.collection() : 컬렉션 생성 역할 \n    // ㄴ> .add({}) : 생성한 컬렉션의 문서 생성 역할\n    // ㄴ>>>> nweets 라는 이름의 폴더(컬렉션)에, State 인 nweet 값과, Date.now() 값을 text 종류 안에 들어가는 내용으로 저장시키려고 하는 것임.\n\n    // setNweet('') // <- 다시 input 의 값으로 설정한 nweet State 값을 빈 문자열로 초기화\n    // ------------------------------------\n  \n\n    // 파이어스토리지 써서 트윗 등록하는 방법 ----------------\n    let previewUrl = '';\n    if(preview !== ''){\n\n    const previewRef = storageService.ref().child(`${userInfo.uid}/${uuidv4()}`);\n    // console.log(previewRef); // ReferenceCompat {_delegate: Reference, storage: StorageServiceCompat}\n    // ㄴ> 스토리지 호출 -> 래퍼런스호출 -> child() 메서드의 인수에 사용자 아이디를 폴더 이름으로, 파일이름을 uuidv4 로 처리\n    const response = await previewRef.putString(preview, \"data_url\")\n    // ㄴ> - 래퍼런스를 할당한, previewRef 에 putString() 메서드를 사용했다. 파이어베이스와 소통해야 해서 async awiat 를 사용했다. \n    //    - putString() 메서드의 인수 : 첫번째로 파일의 url (하단의 fileChange 함수 참고) , 두번째로 첫번째 인수를 문자열로 전달.\n    // console.log(response);\n    // ㄴ> UploadTaskSnapshotCompat {_delegate: {…}, task: UploadTaskCompat, ref: ReferenceCompat}\n    // ㄴ> _delegate.state : \"success\"\n\n    previewUrl = await response.ref.getDownloadURL()\n    // console.log(await response.ref.getDownloadURL()); // <- getDownloadURL() 메서드 : 파일을 다운로드 할수 있는 스토리지의 url 을 반환한다.\n    // ㄴ> https://firebasestorage.googleapis.com/v0/b/nwitter-370f2.appspot.com/o/Ge42aWes3MUBYqB32TiPpSMFfST2%2F41d0d2a8-d55c-4ea...\n    }\n    await dbService.collection('nweets').add({\n      text: nweet,\n      createdAt: Date.now(),\n      creatorId: userInfo.uid,\n      previewUrl\n    })\n    // ㄴ> dbService.collection() : 컬렉션 생성 역할 \n    // ㄴ> .add({}) : 생성한 컬렉션의 문서 생성 역할\n    // ㄴ>>>> nweets 라는 이름의 폴더(컬렉션)에, State 인 nweet 값과, Date.now() 값을 text 종류 안에 들어가는 내용으로 저장시키려고 하는 것임.\n\n    setNweet('') // <- 다시 input 의 값으로 설정한 nweet State 값을 빈 문자열로 초기화\n    setPreview('')\n  }\n\n  const changeInputValue = (e) => {\n    e.preventDefault()\n    const { target: {value},} = e\n    setNweet(value);\n  } \n\n  // 사진 미리보기\n  const filePreview = (e) => {\n    // console.log(e.target.files); // FileList {0: File, length: 1}\n    \n    const { target : {files}} = e;\n    const theFile = files[0];\n    // console.log(theFile); // File {name: 'React 썸네일.jpg', ...}\n\n    const reader = new FileReader()\n    // reader.readAsDataURL(theFile) // <- readAsDataURL() 메서드 : 파일정보를 인수로 받아서, 파일 경로를 url 로 변환시켜주는 메서드\n    if(Boolean(theFile)){\n      reader.readAsDataURL(theFile) // <- readAsDataURL() 메서드 : 파일정보를 인수로 받아서, 파일 경로를 url 로 변환시켜주는 메서드\n    }\n    reader.onloadend = (e) => { // onloadend : 파일이 readAsDataURL() 메서드의 인수로 들어가고 결과가 리턴된 이후의 상황을 감지해준다. \n      // console.log(e) // ProgressEvent {isTrusted: true, lengthComputable: true, loaded: 23108, total: 23108, type: 'loadend', …}\n      const {currentTarget : {result}} = e;\n      // console.log(result); // data:image/jpeg:base64,/9j/4AQSk....\n      setPreview(result)\n    }\n  }\n\n\n\n    // 사진 브라우저 창에서 안 보이게 삭제하기 ( 미리보기 했다가 미리보기 취소 )\n    const fileSubmitCancel = (e) => {\n      e.preventDefault()\n      setPreview('')\n    }\n  \n\n  return (\n    <form onSubmit={submitNweet}>\n    <input type=\"text\" value={nweet} placeholder=\"What's on your mind?\" maxLength={120} onChange={changeInputValue}/>\n    <input type=\"file\" accept=\"image/*\" onChange={filePreview}/>\n    <input type=\"submit\" value=\"Nweet\" />\n    {preview && (\n      <div>\n        <img src={preview} alt=\"preview\" width=\"50px\" height=\"50px\"/>\n        <button onClick={fileSubmitCancel}>Clear</button>\n      </div>\n    )}\n  </form>\n\n\n  )\n}\n\nexport default NweetFactory;","import { dbService, storageService } from \"fbase\"\nimport { useEffect, useState } from \"react\"\n// import { v4 as uuidv4 } from \"uuid\";\n\nimport Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\n\nconst Home = ({userInfo}) => {\n\n  // console.log(userInfo); // <- User {_delegate: UserImpl, multiFactor: MultiFactorUserImpl}\n\n  // const [ nweet, setNweet] = useState('')\n  const [ nweets, setNweets ] = useState([])\n  // const [ preview, setPreview] = useState('')\n\n\n\n\n  useEffect(() => {\n    // getNweets()\n    onSnapshot()\n  },[])\n\n\n  // const changeInputValue = (e) => {\n  //   e.preventDefault()\n  //   const { target: {value},} = e\n  //   setNweet(value);\n  // } \n\n\n  // // 트윗 등록 ( 'C'RUD )\n  // const submitNweet = async (e) => {\n  //   e.preventDefault()\n\n  //   // 파이어스토어 써서 트윗 등록하는 방법 --------------------\n  //   // await dbService.collection('nweets').add({\n  //   //   text: nweet,\n  //   //   createdAt: Date.now(),\n  //   //   creatorId: userInfo.uid\n  //   // })\n  //   // ㄴ> dbService.collection() : 컬렉션 생성 역할 \n  //   // ㄴ> .add({}) : 생성한 컬렉션의 문서 생성 역할\n  //   // ㄴ>>>> nweets 라는 이름의 폴더(컬렉션)에, State 인 nweet 값과, Date.now() 값을 text 종류 안에 들어가는 내용으로 저장시키려고 하는 것임.\n\n  //   // setNweet('') // <- 다시 input 의 값으로 설정한 nweet State 값을 빈 문자열로 초기화\n  //   // ------------------------------------\n  \n\n  //   // 파이어스토리지 써서 트윗 등록하는 방법 ----------------\n  //   let previewUrl = '';\n  //   if(preview !== ''){\n\n  //   const previewRef = storageService.ref().child(`${userInfo.uid}/${uuidv4()}`);\n  //   // console.log(previewRef); // ReferenceCompat {_delegate: Reference, storage: StorageServiceCompat}\n  //   // ㄴ> 스토리지 호출 -> 래퍼런스호출 -> child() 메서드의 인수에 사용자 아이디를 폴더 이름으로, 파일이름을 uuidv4 로 처리\n  //   const response = await previewRef.putString(preview, \"data_url\")\n  //   // ㄴ> - 래퍼런스를 할당한, previewRef 에 putString() 메서드를 사용했다. 파이어베이스와 소통해야 해서 async awiat 를 사용했다. \n  //   //    - putString() 메서드의 인수 : 첫번째로 파일의 url (하단의 fileChange 함수 참고) , 두번째로 첫번째 인수를 문자열로 전달.\n  //   // console.log(response);\n  //   // ㄴ> UploadTaskSnapshotCompat {_delegate: {…}, task: UploadTaskCompat, ref: ReferenceCompat}\n  //   // ㄴ> _delegate.state : \"success\"\n\n  //   previewUrl = await response.ref.getDownloadURL()\n  //   // console.log(await response.ref.getDownloadURL()); // <- getDownloadURL() 메서드 : 파일을 다운로드 할수 있는 스토리지의 url 을 반환한다.\n  //   // ㄴ> https://firebasestorage.googleapis.com/v0/b/nwitter-370f2.appspot.com/o/Ge42aWes3MUBYqB32TiPpSMFfST2%2F41d0d2a8-d55c-4ea...\n  //   }\n  //   await dbService.collection('nweets').add({\n  //     text: nweet,\n  //     createdAt: Date.now(),\n  //     creatorId: userInfo.uid,\n  //     previewUrl\n  //   })\n  //   // ㄴ> dbService.collection() : 컬렉션 생성 역할 \n  //   // ㄴ> .add({}) : 생성한 컬렉션의 문서 생성 역할\n  //   // ㄴ>>>> nweets 라는 이름의 폴더(컬렉션)에, State 인 nweet 값과, Date.now() 값을 text 종류 안에 들어가는 내용으로 저장시키려고 하는 것임.\n\n  //   setNweet('') // <- 다시 input 의 값으로 설정한 nweet State 값을 빈 문자열로 초기화\n  //   setPreview('')\n  // }\n\n  \n  // 트윗 불러오기 ( C'R'UD ) - get() 메서드를 사용하여, 화면이 랜더링될때 한번 목록들 불러오는 방법\n  // 파이어베이스 데이터베이스를 사용하려면 firestore 메서드를 써야 한다.\n  // firestore 메서드를 쓸때는 async await 를 써야 한다.\n  // fbase.js 에서 firestore 메서드를 할당시킨, dbService 변수를 쓰고 있으니, \n  // 이때도 async await 를 써야 한다.\n  // const getNweets = async () => {\n    // const dbNweets = await dbService.collection('nweets').get() // <- get() 메서드는 파이어베이스의 문서목록이랑 여러 정보를 한꺼번에 리턴한다.\n  //   // console.log(dbNweets); // <- dbNweet : 스냅샷(파이어스토어의 원본을 사진 찍듯이 찍어줌)\n  //   // ㄴ>  get() 메서드는 처음에 화면이 랜더링 될때 한번만 실행된다.(그렇기 때문에 새로고침해야, 화면이 업데이트 된다.)\n  //   // dbNweets.forEach(el => console.log(el.data())) // <- 파이어스토어의 데이터   \n  //   // dbNweets.forEach(el => setNweets(nweets = [el.data(), ...nweets])) // <- 'nweets' is constant.\n  //   dbNweets.forEach(el => {\n  //     // 트윗 수정\n  //     const nweetObj = { ...el.data(), id: el.id}\n  //     setNweets(nweets => [nweetObj, ...nweets]) // <- id 를 추가한 객체에 바로 아래처럼 nweets 를 쌓았다.\n  //     // 트윗 불러오기 \n  //     // setNweets(nweets => [el.data(), ...nweets]) // <- 원본 배열인 nweets 에 데이터를 하나씩 쌓아서 추가해야 하기 때문에 이렇게 해야 함.\n  //   })\n  // }\n\n\n  // 트윗 불러오기 ( C'R'UD ) - onSnapshot() 메서드 : 데이터베이스의 변화를 실시간으로 감지하는 해당 메서드를 사용하느 방법\n  const onSnapshot = () => {\n    dbService.collection('nweets')\n    .orderBy('createdAt', 'desc')\n    .onSnapshot(snap => {\n      // console.log(snap); // QuerySnapshot {_firestore: Firestore, _delegate: xu}\n      const newArray = snap.docs.map(el => (\n        { id: el.id,\n          ...el.data()}\n      ))\n      setNweets(newArray)\n    })\n  }\n\n\n  // // 사진 미리보기\n  // const filePreview = (e) => {\n  //   // console.log(e.target.files); // FileList {0: File, length: 1}\n    \n  //   const { target : {files}} = e;\n  //   const theFile = files[0];\n  //   // console.log(theFile); // File {name: 'React 썸네일.jpg', ...}\n\n  //   const reader = new FileReader()\n  //   reader.readAsDataURL(theFile) // <- readAsDataURL() 메서드 : 파일정보를 인수로 받아서, 파일 경로를 url 로 변환시켜주는 메서드\n  //   reader.onloadend = (e) => { // onloadend : 파일이 readAsDataURL() 메서드의 인수로 들어가고 결과가 리턴된 이후의 상황을 감지해준다. \n  //     // console.log(e) // ProgressEvent {isTrusted: true, lengthComputable: true, loaded: 23108, total: 23108, type: 'loadend', …}\n  //     const {currentTarget : {result}} = e;\n  //     // console.log(result); // data:image/jpeg:base64,/9j/4AQSk....\n  //     setPreview(result)\n  //   }\n  // }\n\n\n\n  // // 사진 브라우저 창에서 안 보이게 삭제하기 ( 미리보기 했다가 미리보기 취소 )\n  // const fileSubmitCancel = (e) => {\n  //   e.preventDefault()\n  //   setPreview('')\n  // }\n\n\n  return(\n    // <span>Home</span>\n    <>\n      {/* <form onSubmit={submitNweet}>\n        <input type=\"text\" value={nweet} placeholder=\"What's on your mind?\" maxLength={120} onChange={changeInputValue}/>\n        <input type=\"file\" accept=\"image/*\" onChange={filePreview}/>\n        <input type=\"submit\" value=\"Nweet\" />\n        {preview && (\n          <div>\n            <img src={preview} alt=\"preview\" width=\"50px\" height=\"50px\"/>\n            <button onClick={fileSubmitCancel}>Clear</button>\n          </div>\n        )}\n      </form> */}\n      <NweetFactory userInfo={userInfo}/>\n      <div>\n        {nweets.map(nweet => {\n          return (\n            // <div key={nweet.id}>\n            //   <h4>{nweet.text}</h4>\n            // </div>\n            <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId === userInfo.uid}/>\n          )\n        })}\n      </div>\n  </>\n  )\n\n}\n\nexport default Home","import { authService, dbService } from \"fbase\"\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\"\n\n\nconst Profile = ({userInfo, refreshUser}) => {\n\n  const [ myNweets, setMyNweets] = useState([])\n  const [ newDisplayName, setNewDisplayName] = useState(userInfo.displayName)\n\n  const history = useHistory();\n\n  useEffect(() => {\n    getMyNweets()\n  },[])\n\n\n  // 이름 바꾸기 onChange 이벤트\n  const changeDisplayName = (e) => {\n    const {target: {value}} = e\n    setNewDisplayName(value)\n  }\n\n  const changeDisplayNameSubmit = async (e) => {\n    e.preventDefault()\n    if(userInfo.displayName !== newDisplayName) {\n      await userInfo.updateProfile({displayName: newDisplayName})\n    }\n    refreshUser()\n  }\n\n  // 내가 작성한 트윗 가져오기\n  const getMyNweets = async () => {\n    const nweets = await dbService.collection('nweets') \n    // ㄴ> dbService 함수로 nweets 컬렉션(폴더) 를 가져왔다. \n    .where('creatorId', \"==\", userInfo.uid)\n    .orderBy('createdAt', 'asc')\n    .get()\n\n    const result = nweets.docs.map(el => el.data());\n    console.log(result);\n    // console.log(nweets.docs.map(el => el.data())); \n    /** ㄴ> (2) [ {text: '나는 감자다!', createdAt: 1635494756041, previewUrl: 'https://firebasestorage.googleapis.com/v0/b/n..., creatorId: 'Ge42aWes3MUBYqB32TiPpSMFfST2'},\n    {createdAt: 1635495471563, creatorId: 'Ge42aWes3MUBYqB32TiPpSMFfST2', previewUrl: 'https://firebasestorage.googleapis.com/v0/b/n...,   creatorId: \"Ge42aWes3MUBYqB32TiPpSMFfST2\"] */\n    setMyNweets(result)\n  }\n\n\n  const LogoutClick = () => {\n    authService.signOut() \n    // ㄴ> signOut() : IndexedDB 에 있는 정보를 알아서 비우고, 로그아웃 처리도 해줌 \n    //      -> 로그아웃 되면 index.js 로 인해, App.js 를 재랜더링 해줄것이다.. ( App 컴포넌트 안에 AppRouter 와 footer 가 자식 컴포넌트로 존재함.)\n    //      -> isLoggedIn 의 값은 App.js 안에 있는 useEffect 안에서 해준 setIsLoggedIn(false) 해준 덕분에 \n    //         true 에서 false 로 바뀔 것이다. \n    //      -> 그런데 여전히 path 는 /profile 인 상태이다.\n\n    history.push('/')\n  }\n\n  \n  return (\n    // <span>Profile</span>\n    <>\n    \n      <form onSubmit={changeDisplayNameSubmit}>\n        <input type=\"text\" placeholder=\"Display name\" value={newDisplayName}  onChange={changeDisplayName}/>\n        <input type=\"submit\" value=\"Update Profile\"/>\n      </form>\n      <ul>\n          {myNweets.map(el => \n            <li key={el.createdAt}>\n              {el.text}\n              {el.previewUrl && ( <img src={el.previewUrl} width=\"50px\" height=\"50px\" alt=\"preview\" />)}\n              </li>\n            \n            )}\n      </ul>\n      <button  onClick={LogoutClick}>Log out</button>\n    </>\n  )\n}\n\n\nexport default Profile","import { Link } from \"react-router-dom\"\n\nconst Navigation = ({userInfo}) => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">\n            Home  \n          </Link>\n        </li>\n        <li>\n          <Link to=\"/profile\">\n            {/* My profile   */}\n            {userInfo.displayName}의 Profile\n          </Link>\n        </li>\n      </ul>\n      {/* This is Navigation! */}\n    </nav>\n  )\n}\n\nexport default Navigation;","import { HashRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\n// import Auth from \"../routes/Auth\";\nimport Auth from \"routes/Auth\";\n\n// import Home from \"../routes/Home\";\nimport Home from \"routes/Home\";\n\nimport Profile from \"routes/Profile\";\n\nimport Navigation from \"./Navigation\";\n\n\nconst AppRouter = ({isLoggedIn, userInfo, refreshUser}) => {\n\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userInfo={userInfo} />}\n      <Switch>\n        { isLoggedIn \n        ? \n          (\n            <>\n              <Route exact path=\"/\"> \n                <Home userInfo={userInfo}/>\n              </Route>\n              <Route path=\"/profile\"> \n                <Profile userInfo={userInfo} refreshUser={refreshUser}/>\n              </Route>\n            </>\n          ) \n        : \n          (\n          <Route exact path=\"/\">\n            <Auth/>\n          </Route>\n          )\n        }\n        {/* <Redirect from=\"*\" to=\"/\"/>  */}\n        {/* ㄴ>  - 내가 url 에 뭘 넣든 '/' 라는 경로의 컴포넌트로 이동시켜주는 역할. \n                - /profile 인 상태에서 로그아웃 해서 isLoggedIn 값이 false 로 바뀌었는데,\n                  path 는 여전히 profile 인 상태이고, 그런데 삼항연산자 false 인 경우에는 path가 \n                  여전히 path 가 profile 인 경우가 안적혀있고, path 가 / 인 경우만 적혀있기 때문에\n                  AppRouter 통째가 안그려지고, 나머지 footer 만 그려지고 있게 된다. \n                  이걸 고치기 위해서 재랜더링(리다이렉트 하게 되는 경우)하게 되면 무조건 path 가 \n                  '/' 인 컴포넌트로 이동시키게 해주는 것이다.  \n        */}\n      </Switch>\n    </Router>\n  )\n}\n\nexport default AppRouter;","import { useEffect, useState } from \"react\";\n// import AppRouter from \"./Router\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n\n  // const [ isLoggedIn, setIsLoggedIn] = useState(authService.currentUser)\n  // console.log(authService.currentUser); // <- fbase 파일안에 있는 authService 라는 변수에, firebase 모듈 안에 있는, 인증 모듈인 auth 모듈(메서드)를 할당하엿다.\n  // <- 할당한 인증 모듈인 auth 메서드에 currentUSer 라는 함수를 써서, 현재 로그인한 사람을 확인 \n  // <- 로그인을 안하면 이건 null 값이다.\n\n\n  // const [ isLoggedIn, setIsLoggedIn] = useState(false)\n  const [init, setInit] = useState(false)\n  const [ userInfo, setUerInfo ] = useState(null)\n\n  // console.log(isLoggedIn);\n\n\n  // setInterval(() => console.log(authService.currentUser), 2000)\n  useEffect(() => {\n    // console.log(authService.currentUser); // User 객체\n    authService.onAuthStateChanged((user) => { // <- onAuthStateChanged() 메서드 : 로그인한 사람의 정보를 받아올수 있음\n      // console.log(user) // <- User {_delegate: UserImpl, multiFactor: MultiFactorUserImpl}\n      if(user) { // <- user 객체가 존재하면\n        // setIsLoggedIn(user) // <- isLoggedIn 의 값은 User 객체로 바뀐다.\n        // setIsLoggedIn(user) \n        // setUerInfo(user)\n        setUerInfo({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args)\n        })\n      }else{\n        // setIsLoggedIn(false)\n        setUerInfo(false)\n      }\n      setInit(true)\n      }\n    )\n  }, []) // <- 빈배열로 해야, 컴포넌트가 최초로 랜더링이 완료되었을 때 useEffect 함수가 1번만 동작하게 된다. \n\n\n  const refreshUser = () => { // <- 함수가 실행되면, 인증 모듈에서 authService.currentUser 를 통해, 얻은 바뀐 user 를 UserInfo 에 반영 \n    const user = authService.currentUser;\n    // setUerInfo(authService.currentUser)\n    setUerInfo({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args)\n    })\n  }\n  return (\n    <>\n    { init\n      ? \n      <AppRouter isLoggedIn={Boolean(userInfo)} userInfo={userInfo} refreshUser={refreshUser}/>\n      :   \n      \"initializing....\" \n    }   \n      {/* <footer>&copy; {new Date().getFullYear()} Nwitter</footer> */}\n      {/* <div>App</div> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './components/App';\nimport App from 'components/App';\n\n// import firebase from './firebase'\n// console.log(firebase);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}